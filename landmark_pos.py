#!/usr/bin/env python

import miasmap
import struct

positions = '''
0002565987c79753
0002735a57a08741
0014989ccdc50f27
001812bdb2ba1737
00230bf5193a0938
002cc7fa8f584725
0030cffaab573f15
004281da03a4374c
004a04fdbfb8bf31
005417fb857d9f71
00626bb9c433d320
0069cffa1c563705
006a0b7ddfbe1f0e
007371fa7ea83344
00901d3b7578d76f
009b4fba57afe34e
00a6825b2b813b0d
00a9dd9ab154db77
00ab539bf468c74f
00c9399a2ca0f73d
00c956bbb98f8372
00ca583b6f6cb360
00cf7eda78aab72f
00ef4c3a889e1b4d
00f06ad953996b7b
0ca8972c3e290374
10af7f90721b0c45
1280c5f3971fd62a
15696afa3543da0d
17afed3a24433d5f
19a797511e22f246
1a346f98b820d733
1de16f2daa78c05b
2491addbf35a736b
2b8125b23b625f56
38e76bc11dec121f
3e90e1d42308ac31
520e6b1973b4347c
53c94ef373298d63
53cb88c5811a8d7f
62446aaf8b49d43c
6bd92cf9c6933242
71793a2aaf321e01
73b8e57d9c9dbc69
73f54e9a1f6e0769
777b6f3855b0755e
7fbe47682f21e06d
87493c390731086f
896c8f4577b7de7d
8a5bbf785d3a4935
8d400e58fc254248
922634db8b120c28
9e578ba9a27c6f3a
a15de646cc22ff02
a4cfcb9f8b12eb75
a881eec29c89605b
ab1682e815ac3304
adaeb168fc408b4a
b8674849d9692538
b9535ee3d927e079
ba28e05d6215a939
bfc74728c6512f78
c9cb3a5273b45e74
cae59509f16a4117
d0ef4164e26bb026
d35d83962bc3dd7d
d973fb521b98b63d
da2a93e49cbf5a27
eef15ee0baad4107
f2e63189f6cc5732
f9ef6af055a96630
fc15a500d4990a60
fcbbef9c01b16332
'''.strip().split()

pos2 = [(x[:8], x[8:]) for x in positions]

sightlines = (
(0.19465184211730957, 0.8494337201118469),
(0.18978282809257507, 0.5498577356338501),
(0.3714258372783661, 0.5601730346679688),
(0.9119589328765869, 0.7222474813461304),
(0.6176461577415466, 0.17738570272922516),
(0.4409896433353424, 0.227548748254776),
(0.9119589328765869, 0.7222474813461304),
(0.7779070138931274, 0.3702468276023865),
(0.09218356758356094, 0.927504301071167),
(0.19465184211730957, 0.8494337201118469),
(0.3521861732006073, 0.5449168682098389),
(0.24702055752277374, 0.46234607696533203),
(0.4999551773071289, 0.17874649167060852),
(0.4374293088912964, 0.2756745517253876),
(0.23182062804698944, 0.31361597776412964),
(0.3126826882362366, 0.3081865608692169),
(0.782768726348877, 0.8159047365188599),
(0.7997457981109619, 0.6754828095436096),
(0.7799549102783203, 0.6777567863464355),
(0.782768726348877, 0.8159047365188599),
(0.7467526793479919, 0.7787584066390991),
(0.7997457981109619, 0.6754828095436096),
(0.8235257267951965, 0.7853216528892517),
(0.7799549102783203, 0.6777567863464355),
(0.8235257267951965, 0.7853216528892517),
(0.7997457981109619, 0.6754828095436096),
(0.7799549102783203, 0.6777567863464355),
(0.7997457981109619, 0.6754828095436096),
(0.7799549102783203, 0.6777567863464355),
(0.7799549102783203, 0.6777567863464355),
(0.8235257267951965, 0.7853216528892517),
(0.18701887130737305, 0.5877639651298523),
(0.09218356758356094, 0.927504301071167),
(0.3714258372783661, 0.5601730346679688),
(0.9119589328765869, 0.7222474813461304),
(0.6176461577415466, 0.17738570272922516),
(0.2391076683998108, 0.4136621654033661),
(0.3714258372783661, 0.5601730346679688),
(0.3660159707069397, 0.6777005195617676),
(0.33285853266716003, 0.6584903001785278),
(0.33285853266716003, 0.6584903001785278),
(0.8235257267951965, 0.7853216528892517),
(0.3002367913722992, 0.812103271484375),
(0.3660159707069397, 0.6777005195617676),
(0.782768726348877, 0.8159047365188599),
(0.7997457981109619, 0.6754828095436096),
(0.782768726348877, 0.8159047365188599),
(0.7799549102783203, 0.6777567863464355),
(0.8235257267951965, 0.7853216528892517),
(0.7997457981109619, 0.6754828095436096),
(0.8235257267951965, 0.7853216528892517),
(0.09218356758356094, 0.927504301071167),
(0.4409896433353424, 0.227548748254776),
(0.45500731468200684, 0.2278946042060852),
(0.3102378249168396, 0.5085129737854004),
(0.7799549102783203, 0.6777567863464355),
(0.7426677346229553, 0.6543636918067932),
(0.09218356758356094, 0.927504301071167),
(0.19465184211730957, 0.8494337201118469),
(0.3323611319065094, 0.5256502032279968),
(0.18780940771102905, 0.5916723608970642),
(0.18978282809257507, 0.5498577356338501),
(0.3319801390171051, 0.6541539430618286),
(0.32469063997268677, 0.6468798518180847),
(0.09218356758356094, 0.927504301071167),
(0.09218356758356094, 0.927504301071167),
(0.5104463696479797, 0.6467280387878418),
(0.3323611319065094, 0.5256502032279968),
(0.3714258372783661, 0.5601730346679688),
(0.9119589328765869, 0.7222474813461304),
(0.09218356758356094, 0.927504301071167),
(0.19465184211730957, 0.8494337201118469),
(0.3121357262134552, 0.473225861787796),
(0.32161447405815125, 0.45672181248664856),
(0.7799549102783203, 0.6777567863464355),
(0.5799493789672852, 0.5569092631340027),
(0.1892959624528885, 0.5509091019630432),
(0.18876981735229492, 0.5353613495826721),
(0.47087562084198, 0.4973176419734955),
(0.33854034543037415, 0.5618672966957092),
(0.3896327316761017, 0.2781655192375183),
(0.3501237630844116, 0.28147414326667786),
(0.7417724132537842, 0.29201507568359375),
(0.7250379323959351, 0.2612501382827759),
(0.46796920895576477, 0.9346156120300293),
(0.4550027549266815, 0.9078395962715149),
(0.39491769671440125, 0.7659502029418945),
(0.3509058952331543, 0.5395309925079346),
(0.4267122447490692, 0.7616140246391296),
(0.677001953125, 0.4269946217536926),
(0.3501237630844116, 0.28147414326667786),
(0.35500943660736084, 0.309093713760376),
(0.46796920895576477, 0.9346156120300293),
(0.49046945571899414, 0.8877341747283936),
(0.33751609921455383, 0.9727621674537659),
(0.3381090462207794, 0.958368718624115),
(0.46796920895576477, 0.9346156120300293),
(0.46321162581443787, 0.9238646030426025),
(0.615115225315094, 0.6961328983306885),
(0.7592665553092957, 0.7192257642745972),
(0.46796920895576477, 0.9346156120300293),
(0.49046945571899414, 0.8877341747283936),
(0.33751609921455383, 0.9727621674537659),
(0.7661305069923401, 0.37433987855911255),
(0.6024072170257568, 0.4261564612388611),
(0.677001953125, 0.4269946217536926),
(0.29660385847091675, 0.35133153200149536),
(0.29660385847091675, 0.35133153200149536),
(0.3151780962944031, 0.35397210717201233),
(0.25053301453590393, 0.4381404519081116),
(0.1892959624528885, 0.5509091019630432),
(0.18876981735229492, 0.5353613495826721),
(0.11648104339838028, 0.536517858505249),
(0.4818730652332306, 0.9217017292976379),
(0.47754672169685364, 0.7261597514152527),
(0.1825632005929947, 0.7376440763473511),
(0.3295680582523346, 0.7343783974647522),
(0.1825632005929947, 0.7376440763473511),
(0.2992275655269623, 0.7216989994049072),
(0.1825632005929947, 0.7376440763473511),
(0.1825632005929947, 0.7376440763473511),
(0.3295680582523346, 0.7343783974647522),
(0.2601107954978943, 0.7491591572761536),
(0.2992275655269623, 0.7216989994049072),
(0.30850380659103394, 0.5063439607620239),
(0.32804927229881287, 0.4996132254600525),
(0.800540566444397, 0.33077552914619446),
(0.19407430291175842, 0.731037974357605),
(0.8330925703048706, 0.7436749935150146),
(0.8241191506385803, 0.7849583029747009),
(0.49046945571899414, 0.8877341747283936),
(0.667269229888916, 0.6609511971473694),
(0.5438591241836548, 0.3103227913379669),
(0.605500340461731, 0.628524899482727),
(0.49046945571899414, 0.8877341747283936),
(0.49046945571899414, 0.8877341747283936),
(0.667269229888916, 0.6609511971473694),
(0.5097967982292175, 0.31867268681526184),
(0.5438591241836548, 0.3103227913379669),
(0.5097967982292175, 0.31867268681526184),
(0.5438591241836548, 0.3103227913379669),
(0.6207134127616882, 0.6592497229576111),
(0.667269229888916, 0.6609511971473694),
(0.46796920895576477, 0.9346156120300293),
(0.3381090462207794, 0.958368718624115),
(0.4550027549266815, 0.9078395962715149),
(0.4112626910209656, 0.9573111534118652),
(0.3443673253059387, 0.7584729790687561),
(0.26106229424476624, 0.7484495043754578),
(0.2580607533454895, 0.7653719186782837),
(0.5706987977027893, 0.4405059814453125),
(0.2619898319244385, 0.7050880193710327),
(0.3378239572048187, 0.9729081988334656),
(0.47330573201179504, 0.8993735909461975),
(0.14673100411891937, 0.5556959509849548),
(0.11648104339838028, 0.536517858505249),
(0.2601107954978943, 0.7491591572761536),
(0.2580607533454895, 0.7653719186782837),
(0.47087562084198, 0.4973176419734955),
(0.1892959624528885, 0.5509091019630432),
(0.47087562084198, 0.4973176419734955),
(0.3312043845653534, 0.5852175354957581),
(0.1892959624528885, 0.5509091019630432),
(0.18876981735229492, 0.5353613495826721),
(0.4178026020526886, 0.7600269913673401),
(0.3390963673591614, 0.9598102569580078),
(0.3378239572048187, 0.9729081988334656),
(0.28065621852874756, 0.30947884917259216),
(0.2137853056192398, 0.2742732763290405),
(0.5095669627189636, 0.18472403287887573),
(0.48086822032928467, 0.4791649878025055),
(0.44142061471939087, 0.5202861428260803),
(0.33897051215171814, 0.47367963194847107),
(0.34836599230766296, 0.4473363757133484),
(0.40591901540756226, 0.7649141550064087),
(0.334866464138031, 0.5616536736488342),
)

def plot_two_fixed_point():
	p2 = {(x,y):(float(int(x,16))/0xffffffff, float(int(y,16))/0xffffffff) for (x,y) in pos2}
	for (x,y) in p2.values():
		miasmap.plot_square(int(x * 8192.0), int(y * 8192.0))
	miasmap.save_image('test.jpg')

def plot_sightlines():
	for (x, y) in sightlines:
		miasmap.plot_square(int(x * 8192.0), int(y * 8192.0))
	miasmap.save_image('sightlines.jpg')

def plot_sightlines2():
	import data
	root = data.parse_data(open('saves.dat', 'rb'))
	for save in ('save0', 'save2'):
	# for save in ('save0',):
		landmarks = root[save]['player']['MAP']['landmarks']
		for landmark in landmarks.itervalues():
			pos = landmark['pos'].raw

			# Endian
			# pos = struct.unpack('<II', pos)
			pos = struct.unpack('>II', pos)

			# Mixed endian?
			# pos = (pos[:4], pos[4:])
			# pos = (struct.unpack('<I', pos[0])[0], struct.unpack('>I', pos[1])[0])

			(x, y) = [ int(float(c) * 8192.0 / 0xffffffff) for c in pos ]
			miasmap.plot_square(x, y, rgb = (128, 128, 128))
			for sighting in range(landmark['nsightings']):
				sight = landmark['sight%i' % (sighting+1)]
				(x1, y1) = [ int(c * 8192.0) for c in sight ]
				c = [0, 0, 0]
				c[sighting] = 255
				c = tuple(c)
				# print (x1, y1), (x, y) , c
				print (x, y), (x1, y1) , c
				miasmap.plot_line( [(x1, y1), (x, y)] , fill=c)
	miasmap.save_image('test.jpg')

def plot_quadtree():
	for pos in positions:
		pos = int(pos, 16)
		x = y = 0
		size = 8192.0
		for bit in reversed(range(1, 64, 2)):
		# for bit in range(0, 64, 2):
			size /= 2.0
			x1 = (pos >>  bit     ) & 1
			y1 = (pos >> (bit + 1)) & 1
			if x1: x += size
			if y1: y += size
		print (x, y)
		miasmap.plot_square(int(x), int(y))
	miasmap.save_image('test.jpg')

def plot_quadtree2():
	for pos in positions:
		for i in range(8):


def test():
	for pos in positions:
		pos = pos.decode('hex')
		# - First byte is often 0. First value could be a 16bit
		#   integer, if not more.
		# - Last byte always appears to be <= 127 (i.e. bit 7 is always
		#   0). Standalone value?
		#
		# Another possibility is this is an index to a quadtree?
		#
		# Could the first part be an instance node index, and the last
		# part be an item in the node? Seems a bit inefficient given
		# the markers file...
		#
		# print '\t'.join(map(str, struct.unpack('HHHBB', pos)))
		print '\t'.join([ ''.join(reversed('{0:08b}'.format(x))) for x in struct.unpack('8B', pos) ])

def main():
	miasmap.init(False)

	# ONLY ONE AT A TIME
	# plot_two_fixed_point()
	# plot_sightlines()
	# plot_sightlines2()
	# plot_quadtree()
	# test()
	plot_quadtree2()

if __name__ == '__main__':
	main()
